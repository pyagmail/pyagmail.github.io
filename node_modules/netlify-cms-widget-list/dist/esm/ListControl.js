"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _v = _interopRequireDefault(require("uuid/v4"));

var _reactSortableHoc = require("react-sortable-hoc");

var _netlifyCmsWidgetObject = _interopRequireDefault(require("netlify-cms-widget-object"));

var _typedListHelpers = require("./typedListHelpers");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _netlifyCmsLibWidgets = require("netlify-cms-lib-widgets");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n                ", "\n              "]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n                  ", ";\n                "]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

function valueToString(value) {
  return value ? value.join(',').replace(/,([^\s]|$)/g, ', $1') : '';
}

const ObjectControl = _netlifyCmsWidgetObject.default.controlComponent;
const ListItem = (0, _styledBase.default)("div", {
  target: "e14bfka80",
  label: "ListItem"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SortableListItem = (0, _reactSortableHoc.SortableElement)(ListItem);
const StyledListItemTopBar = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.ListItemTopBar, {
  target: "e14bfka81",
  label: "StyledListItemTopBar"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NestedObjectLabel = (0, _styledBase.default)("div", {
  target: "e14bfka82",
  label: "NestedObjectLabel"
})("display:", props => props.collapsed ? 'block' : 'none', ";border-top:0;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : 'inherit', ";background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";padding:13px;border-radius:0 0 ", _netlifyCmsUiDefault.lengths.borderRadius, " ", _netlifyCmsUiDefault.lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const styleStrings = {
  collapsedObjectControl: "\n    display: none;\n  ",
  objectWidgetTopBarContainer: "\n    padding: ".concat(_netlifyCmsUiDefault.lengths.objectWidgetTopBarContainerPadding, ";\n  ")
};
const styles = {
  listControlItem: process.env.NODE_ENV === "production" ? {
    name: "1pb8r5b-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;};label:listControlItem;"
  } : {
    name: "1pb8r5b-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;};label:listControlItem;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  listControlItemCollapsed: process.env.NODE_ENV === "production" ? {
    name: "1u3t54p-listControlItemCollapsed",
    styles: "padding-bottom:0;;label:listControlItemCollapsed;"
  } : {
    name: "1u3t54p-listControlItemCollapsed",
    styles: "padding-bottom:0;;label:listControlItemCollapsed;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const SortableList = (0, _reactSortableHoc.SortableContainer)(({
  items,
  renderItem
}) => {
  return (0, _core.jsx)("div", null, items.map(renderItem));
});
const valueTypes = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE',
  MIXED: 'MIXED'
};

const handleSummary = (summary, entry, label, item) => {
  const data = _netlifyCmsLibWidgets.stringTemplate.addFileTemplateFields(entry.get('path'), item.set('fields.label', label));

  return _netlifyCmsLibWidgets.stringTemplate.compileStringTemplate(summary, null, '', data);
};

class ListControl extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "validations", []);

    _defineProperty(this, "getValueType", () => {
      const {
        field
      } = this.props;

      if (field.get('fields')) {
        return valueTypes.MULTIPLE;
      } else if (field.get('field')) {
        return valueTypes.SINGLE;
      } else if (field.get(_typedListHelpers.TYPES_KEY)) {
        return valueTypes.MIXED;
      } else {
        return null;
      }
    });

    _defineProperty(this, "handleChange", e => {
      const {
        onChange
      } = this.props;
      const oldValue = this.state.value;
      const newValue = e.target.value;
      const listValue = e.target.value.split(',');

      if (newValue.match(/,$/) && oldValue.match(/, $/)) {
        listValue.pop();
      }

      const parsedValue = valueToString(listValue);
      this.setState({
        value: parsedValue
      });
      onChange((0, _immutable.List)(listValue.map(val => val.trim())));
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.setActiveStyle();
    });

    _defineProperty(this, "handleBlur", e => {
      const listValue = e.target.value.split(',').map(el => el.trim()).filter(el => el);
      this.setState({
        value: valueToString(listValue)
      });
      this.props.setInactiveStyle();
    });

    _defineProperty(this, "handleAdd", e => {
      e.preventDefault();
      const {
        value,
        onChange,
        field
      } = this.props;
      const parsedValue = this.getValueType() === valueTypes.SINGLE ? this.singleDefault() : (0, _immutable.fromJS)(this.multipleDefault(field.get('fields')));
      this.setState({
        itemsCollapsed: [...this.state.itemsCollapsed, false],
        keys: [...this.state.keys, (0, _v.default)()]
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "singleDefault", () => {
      return this.props.field.getIn(['field', 'default'], null);
    });

    _defineProperty(this, "multipleDefault", fields => {
      return this.getFieldsDefault(fields);
    });

    _defineProperty(this, "handleAddType", (type, typeKey) => {
      const {
        value,
        onChange
      } = this.props;
      const parsedValue = (0, _immutable.fromJS)(this.mixedDefault(typeKey, type));
      this.setState({
        itemsCollapsed: [...this.state.itemsCollapsed, false],
        keys: [...this.state.keys, (0, _v.default)()]
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "mixedDefault", (typeKey, type) => {
      const selectedType = this.props.field.get(_typedListHelpers.TYPES_KEY).find(f => f.get('name') === type);
      const fields = selectedType.get('fields') || [selectedType.get('field')];
      return this.getFieldsDefault(fields, {
        [typeKey]: type
      });
    });

    _defineProperty(this, "getFieldsDefault", (fields, initialValue = {}) => {
      return fields.reduce((acc, item) => {
        const subfields = item.get('field') || item.get('fields');
        const object = item.get('widget') == 'object';
        const name = item.get('name');
        const defaultValue = item.get('default', null);

        if (_immutable.List.isList(subfields) && object) {
          const subDefaultValue = this.getFieldsDefault(subfields);
          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (_immutable.Map.isMap(subfields) && object) {
          const subDefaultValue = this.getFieldsDefault([subfields]);
          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (defaultValue !== null) {
          acc[name] = defaultValue;
        }

        return acc;
      }, initialValue);
    });

    _defineProperty(this, "processControlRef", ref => {
      if (!ref) return;
      const {
        validate,
        props: {
          validationKey: key
        }
      } = ref;
      this.validations.push({
        key,
        validate
      });
    });

    _defineProperty(this, "validate", () => {
      if (this.getValueType()) {
        this.validations.forEach(item => {
          item.validate();
        });
      } else {
        this.props.validate();
      }
    });

    _defineProperty(this, "getObjectValue", idx => this.props.value.get(idx) || (0, _immutable.Map)());

    _defineProperty(this, "handleRemove", (index, key, event) => {
      event.preventDefault();
      const {
        itemsCollapsed,
        keys
      } = this.state;
      const {
        value,
        metadata,
        onChange,
        field,
        clearFieldErrors
      } = this.props;
      const collectionName = field.get('name');
      const isSingleField = this.getValueType() === valueTypes.SINGLE;
      const validations = this.validations;
      const metadataRemovePath = isSingleField ? value.get(index) : value.get(index).valueSeq();
      const parsedMetadata = metadata && !metadata.isEmpty() ? {
        [collectionName]: metadata.removeIn(metadataRemovePath)
      } : metadata;
      itemsCollapsed.splice(index, 1);
      keys.splice(index, 1);
      this.setState({
        itemsCollapsed: [...itemsCollapsed],
        keys: [...keys]
      });
      onChange(value.remove(index), parsedMetadata);
      clearFieldErrors(); // Remove deleted item object validation

      if (validations) {
        this.validations = validations.filter(item => item.key !== key);
      }
    });

    _defineProperty(this, "handleItemCollapseToggle", (index, event) => {
      event.preventDefault();
      const {
        itemsCollapsed
      } = this.state;
      const newItemsCollapsed = itemsCollapsed.map((collapsed, itemIndex) => {
        if (index === itemIndex) {
          return !collapsed;
        }

        return collapsed;
      });
      this.setState({
        itemsCollapsed: newItemsCollapsed
      });
    });

    _defineProperty(this, "handleCollapseAllToggle", e => {
      e.preventDefault();
      const {
        value,
        field
      } = this.props;
      const {
        itemsCollapsed,
        listCollapsed
      } = this.state;
      const minimizeCollapsedItems = field.get('minimize_collapsed', false);
      const listCollapsedByDefault = field.get('collapsed', true);
      const allItemsCollapsed = itemsCollapsed.every(val => val === true);

      if (minimizeCollapsedItems) {
        let updatedItemsCollapsed = itemsCollapsed; // Only allow collapsing all items in this mode but not opening all at once

        if (!listCollapsed || !listCollapsedByDefault) {
          updatedItemsCollapsed = Array(value.size).fill(!listCollapsed);
        }

        this.setState({
          listCollapsed: !listCollapsed,
          itemsCollapsed: updatedItemsCollapsed
        });
      } else {
        this.setState({
          itemsCollapsed: Array(value.size).fill(!allItemsCollapsed)
        });
      }
    });

    _defineProperty(this, "onSortEnd", ({
      oldIndex,
      newIndex
    }) => {
      const {
        value,
        clearFieldErrors
      } = this.props;
      const {
        itemsCollapsed,
        keys
      } = this.state; // Update value

      const item = value.get(oldIndex);
      const newValue = value.delete(oldIndex).insert(newIndex, item);
      this.props.onChange(newValue); // Update collapsing

      const collapsed = itemsCollapsed[oldIndex];
      itemsCollapsed.splice(oldIndex, 1);
      const updatedItemsCollapsed = [...itemsCollapsed];
      updatedItemsCollapsed.splice(newIndex, 0, collapsed); // Reset item to ensure updated state

      const updatedKeys = keys.map((key, keyIndex) => {
        if (keyIndex === oldIndex || keyIndex === newIndex) {
          return (0, _v.default)();
        }

        return key;
      });
      this.setState({
        itemsCollapsed: updatedItemsCollapsed,
        keys: updatedKeys
      }); //clear error fields and remove old validations

      clearFieldErrors();
      this.validations = this.validations.filter(item => updatedKeys.includes(item.key));
    });

    _defineProperty(this, "renderItem", (item, index) => {
      const {
        classNameWrapper,
        editorControl,
        onValidateObject,
        metadata,
        clearFieldErrors,
        fieldsErrors,
        controlRef,
        resolveWidget
      } = this.props;
      const {
        itemsCollapsed,
        keys
      } = this.state;
      const collapsed = itemsCollapsed[index];
      const key = keys[index];
      let field = this.props.field;

      if (this.getValueType() === valueTypes.MIXED) {
        field = (0, _typedListHelpers.getTypedFieldForValue)(field, item);

        if (!field) {
          return this.renderErroneousTypedItem(index, item);
        }
      }

      return (0, _core.jsx)(SortableListItem, {
        css: /*#__PURE__*/(0, _css2.default)([styles.listControlItem, collapsed && styles.listControlItemCollapsed], ";label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        index: index,
        key: key
      }, (0, _core.jsx)(StyledListItemTopBar, {
        collapsed: collapsed,
        onCollapseToggle: (0, _partial2.default)(this.handleItemCollapseToggle, index),
        onRemove: (0, _partial2.default)(this.handleRemove, index, key),
        dragHandleHOC: _reactSortableHoc.SortableHandle,
        "data-testid": "styled-list-item-top-bar-".concat(key)
      }), (0, _core.jsx)(NestedObjectLabel, {
        collapsed: collapsed
      }, this.objectLabel(item)), (0, _core.jsx)(_core.ClassNames, null, ({
        css,
        cx
      }) => (0, _core.jsx)(ObjectControl, {
        classNameWrapper: cx(classNameWrapper, {
          [css(_templateObject(), styleStrings.collapsedObjectControl)]: collapsed
        }),
        value: item,
        field: field,
        onChangeObject: this.handleChangeFor(index),
        editorControl: editorControl,
        resolveWidget: resolveWidget,
        metadata: metadata,
        forList: true,
        onValidateObject: onValidateObject,
        clearFieldErrors: clearFieldErrors,
        fieldsErrors: fieldsErrors,
        ref: this.processControlRef,
        controlRef: controlRef,
        validationKey: key,
        collapsed: collapsed,
        "data-testid": "object-control-".concat(key)
      })));
    });

    const {
      field: _field,
      value: _value
    } = props;

    const _listCollapsed = _field.get('collapsed', true);

    const _itemsCollapsed = _value && Array(_value.size).fill(_listCollapsed) || [];

    const _keys = _value && Array.from({
      length: _value.size
    }, () => (0, _v.default)()) || [];

    this.state = {
      listCollapsed: _listCollapsed,
      itemsCollapsed: _itemsCollapsed,
      value: valueToString(_value),
      keys: _keys
    };
  }

  /**
   * Always update so that each nested widget has the option to update. This is
   * required because ControlHOC provides a default `shouldComponentUpdate`
   * which only updates if the value changes, but every widget must be allowed
   * to override this.
   */
  shouldComponentUpdate() {
    return true;
  }

  handleChangeFor(index) {
    return (fieldName, newValue, newMetadata) => {
      const {
        value,
        metadata,
        onChange,
        field
      } = this.props;
      const collectionName = field.get('name');
      const listFieldObjectWidget = field.getIn(['field', 'widget']) === 'object';
      const withNameKey = this.getValueType() !== valueTypes.SINGLE || this.getValueType() === valueTypes.SINGLE && listFieldObjectWidget;
      const newObjectValue = withNameKey ? this.getObjectValue(index).set(fieldName, newValue) : newValue;
      const parsedMetadata = {
        [collectionName]: Object.assign(metadata ? metadata.toJS() : {}, newMetadata || {})
      };
      onChange(value.set(index, newObjectValue), parsedMetadata);
    };
  }

  objectLabel(item) {
    const {
      field,
      entry
    } = this.props;
    const valueType = this.getValueType();

    switch (valueType) {
      case valueTypes.MIXED:
        {
          const itemType = (0, _typedListHelpers.getTypedFieldForValue)(field, item);
          const label = itemType.get('label', itemType.get('name')); // each type can have its own summary, but default to the list summary if exists

          const summary = itemType.get('summary', field.get('summary'));
          const labelReturn = summary ? handleSummary(summary, entry, label, item) : label;
          return labelReturn;
        }

      case valueTypes.SINGLE:
        {
          const singleField = field.get('field');
          const label = singleField.get('label', singleField.get('name'));
          const summary = field.get('summary');
          const data = (0, _immutable.fromJS)({
            [singleField.get('name')]: item
          });
          const labelReturn = summary ? handleSummary(summary, entry, label, data) : label;
          return labelReturn;
        }

      case valueTypes.MULTIPLE:
        {
          const multiFields = field.get('fields');
          const labelField = multiFields && multiFields.first();
          const value = item.get(labelField.get('name'));
          const summary = field.get('summary');
          const labelReturn = summary ? handleSummary(summary, entry, value, item) : value;
          return (labelReturn || "No ".concat(labelField.get('name'))).toString();
        }
    }

    return '';
  }

  renderErroneousTypedItem(index, item) {
    const field = this.props.field;
    const errorMessage = (0, _typedListHelpers.getErrorMessageForTypedFieldAndValue)(field, item);
    const key = "item-".concat(index);
    return (0, _core.jsx)(SortableListItem, {
      css: /*#__PURE__*/(0, _css2.default)([styles.listControlItem, styles.listControlItemCollapsed], ";label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXN0Q29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1ZVEiLCJmaWxlIjoiLi4vLi4vc3JjL0xpc3RDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzLCBDbGFzc05hbWVzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBMaXN0LCBNYXAsIGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBwYXJ0aWFsLCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB1dWlkIGZyb20gJ3V1aWQvdjQnO1xuaW1wb3J0IHsgU29ydGFibGVDb250YWluZXIsIFNvcnRhYmxlRWxlbWVudCwgU29ydGFibGVIYW5kbGUgfSBmcm9tICdyZWFjdC1zb3J0YWJsZS1ob2MnO1xuaW1wb3J0IE5ldGxpZnlDbXNXaWRnZXRPYmplY3QgZnJvbSAnbmV0bGlmeS1jbXMtd2lkZ2V0LW9iamVjdCc7XG5pbXBvcnQge1xuICBUWVBFU19LRVksXG4gIGdldFR5cGVkRmllbGRGb3JWYWx1ZSxcbiAgcmVzb2x2ZUZpZWxkS2V5VHlwZSxcbiAgZ2V0RXJyb3JNZXNzYWdlRm9yVHlwZWRGaWVsZEFuZFZhbHVlLFxufSBmcm9tICcuL3R5cGVkTGlzdEhlbHBlcnMnO1xuaW1wb3J0IHsgTGlzdEl0ZW1Ub3BCYXIsIE9iamVjdFdpZGdldFRvcEJhciwgY29sb3JzLCBsZW5ndGhzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdHJpbmdUZW1wbGF0ZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi13aWRnZXRzJztcblxuZnVuY3Rpb24gdmFsdWVUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5qb2luKCcsJykucmVwbGFjZSgvLChbXlxcc118JCkvZywgJywgJDEnKSA6ICcnO1xufVxuXG5jb25zdCBPYmplY3RDb250cm9sID0gTmV0bGlmeUNtc1dpZGdldE9iamVjdC5jb250cm9sQ29tcG9uZW50O1xuXG5jb25zdCBMaXN0SXRlbSA9IHN0eWxlZC5kaXYoKTtcblxuY29uc3QgU29ydGFibGVMaXN0SXRlbSA9IFNvcnRhYmxlRWxlbWVudChMaXN0SXRlbSk7XG5cbmNvbnN0IFN0eWxlZExpc3RJdGVtVG9wQmFyID0gc3R5bGVkKExpc3RJdGVtVG9wQmFyKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbmA7XG5cbmNvbnN0IE5lc3RlZE9iamVjdExhYmVsID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogJHtwcm9wcyA9PiAocHJvcHMuY29sbGFwc2VkID8gJ2Jsb2NrJyA6ICdub25lJyl9O1xuICBib3JkZXItdG9wOiAwO1xuICBjb2xvcjogJHtwcm9wcyA9PiAocHJvcHMuZXJyb3IgPyBjb2xvcnMuZXJyb3JUZXh0IDogJ2luaGVyaXQnKX07XG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gIHBhZGRpbmc6IDEzcHg7XG4gIGJvcmRlci1yYWRpdXM6IDAgMCAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfSAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbmA7XG5cbmNvbnN0IHN0eWxlU3RyaW5ncyA9IHtcbiAgY29sbGFwc2VkT2JqZWN0Q29udHJvbDogYFxuICAgIGRpc3BsYXk6IG5vbmU7XG4gIGAsXG4gIG9iamVjdFdpZGdldFRvcEJhckNvbnRhaW5lcjogYFxuICAgIHBhZGRpbmc6ICR7bGVuZ3Rocy5vYmplY3RXaWRnZXRUb3BCYXJDb250YWluZXJQYWRkaW5nfTtcbiAgYCxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGlzdENvbnRyb2xJdGVtOiBjc3NgXG4gICAgbWFyZ2luLXRvcDogMThweDtcblxuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tdG9wOiAyNnB4O1xuICAgIH1cbiAgYCxcbiAgbGlzdENvbnRyb2xJdGVtQ29sbGFwc2VkOiBjc3NgXG4gICAgcGFkZGluZy1ib3R0b206IDA7XG4gIGAsXG59O1xuXG5jb25zdCBTb3J0YWJsZUxpc3QgPSBTb3J0YWJsZUNvbnRhaW5lcigoeyBpdGVtcywgcmVuZGVySXRlbSB9KSA9PiB7XG4gIHJldHVybiA8ZGl2PntpdGVtcy5tYXAocmVuZGVySXRlbSl9PC9kaXY+O1xufSk7XG5cbmNvbnN0IHZhbHVlVHlwZXMgPSB7XG4gIFNJTkdMRTogJ1NJTkdMRScsXG4gIE1VTFRJUExFOiAnTVVMVElQTEUnLFxuICBNSVhFRDogJ01JWEVEJyxcbn07XG5cbmNvbnN0IGhhbmRsZVN1bW1hcnkgPSAoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBpdGVtKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBzdHJpbmdUZW1wbGF0ZS5hZGRGaWxlVGVtcGxhdGVGaWVsZHMoXG4gICAgZW50cnkuZ2V0KCdwYXRoJyksXG4gICAgaXRlbS5zZXQoJ2ZpZWxkcy5sYWJlbCcsIGxhYmVsKSxcbiAgKTtcbiAgcmV0dXJuIHN0cmluZ1RlbXBsYXRlLmNvbXBpbGVTdHJpbmdUZW1wbGF0ZShzdW1tYXJ5LCBudWxsLCAnJywgZGF0YSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0Q29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHZhbGlkYXRpb25zID0gW107XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBtZXRhZGF0YTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZU9iamVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblZhbGlkYXRlT2JqZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmb3JJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25PcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQWRkQXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVkaXRvckNvbnRyb2w6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVzb2x2ZVdpZGdldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGVhckZpZWxkRXJyb3JzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB2YWx1ZTogTGlzdCgpLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHsgZmllbGQsIHZhbHVlIH0gPSBwcm9wcztcbiAgICBjb25zdCBsaXN0Q29sbGFwc2VkID0gZmllbGQuZ2V0KCdjb2xsYXBzZWQnLCB0cnVlKTtcbiAgICBjb25zdCBpdGVtc0NvbGxhcHNlZCA9ICh2YWx1ZSAmJiBBcnJheSh2YWx1ZS5zaXplKS5maWxsKGxpc3RDb2xsYXBzZWQpKSB8fCBbXTtcbiAgICBjb25zdCBrZXlzID0gKHZhbHVlICYmIEFycmF5LmZyb20oeyBsZW5ndGg6IHZhbHVlLnNpemUgfSwgKCkgPT4gdXVpZCgpKSkgfHwgW107XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbGlzdENvbGxhcHNlZCxcbiAgICAgIGl0ZW1zQ29sbGFwc2VkLFxuICAgICAgdmFsdWU6IHZhbHVlVG9TdHJpbmcodmFsdWUpLFxuICAgICAga2V5cyxcbiAgICB9O1xuICB9XG5cbiAgZ2V0VmFsdWVUeXBlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGZpZWxkLmdldCgnZmllbGRzJykpIHtcbiAgICAgIHJldHVybiB2YWx1ZVR5cGVzLk1VTFRJUExFO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZ2V0KCdmaWVsZCcpKSB7XG4gICAgICByZXR1cm4gdmFsdWVUeXBlcy5TSU5HTEU7XG4gICAgfSBlbHNlIGlmIChmaWVsZC5nZXQoVFlQRVNfS0VZKSkge1xuICAgICAgcmV0dXJuIHZhbHVlVHlwZXMuTUlYRUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQWx3YXlzIHVwZGF0ZSBzbyB0aGF0IGVhY2ggbmVzdGVkIHdpZGdldCBoYXMgdGhlIG9wdGlvbiB0byB1cGRhdGUuIFRoaXMgaXNcbiAgICogcmVxdWlyZWQgYmVjYXVzZSBDb250cm9sSE9DIHByb3ZpZGVzIGEgZGVmYXVsdCBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYFxuICAgKiB3aGljaCBvbmx5IHVwZGF0ZXMgaWYgdGhlIHZhbHVlIGNoYW5nZXMsIGJ1dCBldmVyeSB3aWRnZXQgbXVzdCBiZSBhbGxvd2VkXG4gICAqIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGxpc3RWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnNwbGl0KCcsJyk7XG4gICAgaWYgKG5ld1ZhbHVlLm1hdGNoKC8sJC8pICYmIG9sZFZhbHVlLm1hdGNoKC8sICQvKSkge1xuICAgICAgbGlzdFZhbHVlLnBvcCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gdmFsdWVUb1N0cmluZyhsaXN0VmFsdWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogcGFyc2VkVmFsdWUgfSk7XG4gICAgb25DaGFuZ2UoTGlzdChsaXN0VmFsdWUubWFwKHZhbCA9PiB2YWwudHJpbSgpKSkpO1xuICB9O1xuXG4gIGhhbmRsZUZvY3VzID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMuc2V0QWN0aXZlU3R5bGUoKTtcbiAgfTtcblxuICBoYW5kbGVCbHVyID0gZSA9PiB7XG4gICAgY29uc3QgbGlzdFZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAubWFwKGVsID0+IGVsLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoZWwgPT4gZWwpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogdmFsdWVUb1N0cmluZyhsaXN0VmFsdWUpIH0pO1xuICAgIHRoaXMucHJvcHMuc2V0SW5hY3RpdmVTdHlsZSgpO1xuICB9O1xuXG4gIGhhbmRsZUFkZCA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IHZhbHVlLCBvbkNoYW5nZSwgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPVxuICAgICAgdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5TSU5HTEVcbiAgICAgICAgPyB0aGlzLnNpbmdsZURlZmF1bHQoKVxuICAgICAgICA6IGZyb21KUyh0aGlzLm11bHRpcGxlRGVmYXVsdChmaWVsZC5nZXQoJ2ZpZWxkcycpKSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpdGVtc0NvbGxhcHNlZDogWy4uLnRoaXMuc3RhdGUuaXRlbXNDb2xsYXBzZWQsIGZhbHNlXSxcbiAgICAgIGtleXM6IFsuLi50aGlzLnN0YXRlLmtleXMsIHV1aWQoKV0sXG4gICAgfSk7XG4gICAgb25DaGFuZ2UoKHZhbHVlIHx8IExpc3QoKSkucHVzaChwYXJzZWRWYWx1ZSkpO1xuICB9O1xuXG4gIHNpbmdsZURlZmF1bHQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZmllbGQuZ2V0SW4oWydmaWVsZCcsICdkZWZhdWx0J10sIG51bGwpO1xuICB9O1xuXG4gIG11bHRpcGxlRGVmYXVsdCA9IGZpZWxkcyA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmllbGRzRGVmYXVsdChmaWVsZHMpO1xuICB9O1xuXG4gIGhhbmRsZUFkZFR5cGUgPSAodHlwZSwgdHlwZUtleSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gZnJvbUpTKHRoaXMubWl4ZWREZWZhdWx0KHR5cGVLZXksIHR5cGUpKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zQ29sbGFwc2VkOiBbLi4udGhpcy5zdGF0ZS5pdGVtc0NvbGxhcHNlZCwgZmFsc2VdLFxuICAgICAga2V5czogWy4uLnRoaXMuc3RhdGUua2V5cywgdXVpZCgpXSxcbiAgICB9KTtcbiAgICBvbkNoYW5nZSgodmFsdWUgfHwgTGlzdCgpKS5wdXNoKHBhcnNlZFZhbHVlKSk7XG4gIH07XG5cbiAgbWl4ZWREZWZhdWx0ID0gKHR5cGVLZXksIHR5cGUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZFR5cGUgPSB0aGlzLnByb3BzLmZpZWxkLmdldChUWVBFU19LRVkpLmZpbmQoZiA9PiBmLmdldCgnbmFtZScpID09PSB0eXBlKTtcbiAgICBjb25zdCBmaWVsZHMgPSBzZWxlY3RlZFR5cGUuZ2V0KCdmaWVsZHMnKSB8fCBbc2VsZWN0ZWRUeXBlLmdldCgnZmllbGQnKV07XG5cbiAgICByZXR1cm4gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KGZpZWxkcywgeyBbdHlwZUtleV06IHR5cGUgfSk7XG4gIH07XG5cbiAgZ2V0RmllbGRzRGVmYXVsdCA9IChmaWVsZHMsIGluaXRpYWxWYWx1ZSA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGZpZWxkcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc3ViZmllbGRzID0gaXRlbS5nZXQoJ2ZpZWxkJykgfHwgaXRlbS5nZXQoJ2ZpZWxkcycpO1xuICAgICAgY29uc3Qgb2JqZWN0ID0gaXRlbS5nZXQoJ3dpZGdldCcpID09ICdvYmplY3QnO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW0uZ2V0KCduYW1lJyk7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBpdGVtLmdldCgnZGVmYXVsdCcsIG51bGwpO1xuXG4gICAgICBpZiAoTGlzdC5pc0xpc3Qoc3ViZmllbGRzKSAmJiBvYmplY3QpIHtcbiAgICAgICAgY29uc3Qgc3ViRGVmYXVsdFZhbHVlID0gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KHN1YmZpZWxkcyk7XG4gICAgICAgICFpc0VtcHR5KHN1YkRlZmF1bHRWYWx1ZSkgJiYgKGFjY1tuYW1lXSA9IHN1YkRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGlmIChNYXAuaXNNYXAoc3ViZmllbGRzKSAmJiBvYmplY3QpIHtcbiAgICAgICAgY29uc3Qgc3ViRGVmYXVsdFZhbHVlID0gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KFtzdWJmaWVsZHNdKTtcbiAgICAgICAgIWlzRW1wdHkoc3ViRGVmYXVsdFZhbHVlKSAmJiAoYWNjW25hbWVdID0gc3ViRGVmYXVsdFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBhY2NbbmFtZV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgaW5pdGlhbFZhbHVlKTtcbiAgfTtcblxuICBwcm9jZXNzQ29udHJvbFJlZiA9IHJlZiA9PiB7XG4gICAgaWYgKCFyZWYpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICB2YWxpZGF0ZSxcbiAgICAgIHByb3BzOiB7IHZhbGlkYXRpb25LZXk6IGtleSB9LFxuICAgIH0gPSByZWY7XG4gICAgdGhpcy52YWxpZGF0aW9ucy5wdXNoKHsga2V5LCB2YWxpZGF0ZSB9KTtcbiAgfTtcblxuICB2YWxpZGF0ZSA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5nZXRWYWx1ZVR5cGUoKSkge1xuICAgICAgdGhpcy52YWxpZGF0aW9ucy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpdGVtLnZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSW4gY2FzZSB0aGUgYG9uQ2hhbmdlT2JqZWN0YCBmdW5jdGlvbiBpcyBmcm96ZW4gYnkgYSBjaGlsZCB3aWRnZXQgaW1wbGVtZW50YXRpb24sXG4gICAqIGUuZy4gd2hlbiBkZWJvdW5jZWQsIGFsd2F5cyBnZXQgdGhlIGxhdGVzdCBvYmplY3QgdmFsdWUgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgdGhpcy5wcm9wcy52YWx1ZWAgZGlyZWN0bHkuXG4gICAqL1xuICBnZXRPYmplY3RWYWx1ZSA9IGlkeCA9PiB0aGlzLnByb3BzLnZhbHVlLmdldChpZHgpIHx8IE1hcCgpO1xuXG4gIGhhbmRsZUNoYW5nZUZvcihpbmRleCkge1xuICAgIHJldHVybiAoZmllbGROYW1lLCBuZXdWYWx1ZSwgbmV3TWV0YWRhdGEpID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUsIG1ldGFkYXRhLCBvbkNoYW5nZSwgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuICAgICAgY29uc3QgbGlzdEZpZWxkT2JqZWN0V2lkZ2V0ID0gZmllbGQuZ2V0SW4oWydmaWVsZCcsICd3aWRnZXQnXSkgPT09ICdvYmplY3QnO1xuICAgICAgY29uc3Qgd2l0aE5hbWVLZXkgPVxuICAgICAgICB0aGlzLmdldFZhbHVlVHlwZSgpICE9PSB2YWx1ZVR5cGVzLlNJTkdMRSB8fFxuICAgICAgICAodGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5TSU5HTEUgJiYgbGlzdEZpZWxkT2JqZWN0V2lkZ2V0KTtcbiAgICAgIGNvbnN0IG5ld09iamVjdFZhbHVlID0gd2l0aE5hbWVLZXlcbiAgICAgICAgPyB0aGlzLmdldE9iamVjdFZhbHVlKGluZGV4KS5zZXQoZmllbGROYW1lLCBuZXdWYWx1ZSlcbiAgICAgICAgOiBuZXdWYWx1ZTtcbiAgICAgIGNvbnN0IHBhcnNlZE1ldGFkYXRhID0ge1xuICAgICAgICBbY29sbGVjdGlvbk5hbWVdOiBPYmplY3QuYXNzaWduKG1ldGFkYXRhID8gbWV0YWRhdGEudG9KUygpIDoge30sIG5ld01ldGFkYXRhIHx8IHt9KSxcbiAgICAgIH07XG4gICAgICBvbkNoYW5nZSh2YWx1ZS5zZXQoaW5kZXgsIG5ld09iamVjdFZhbHVlKSwgcGFyc2VkTWV0YWRhdGEpO1xuICAgIH07XG4gIH1cblxuICBoYW5kbGVSZW1vdmUgPSAoaW5kZXgsIGtleSwgZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQsIGtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyB2YWx1ZSwgbWV0YWRhdGEsIG9uQ2hhbmdlLCBmaWVsZCwgY2xlYXJGaWVsZEVycm9ycyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuICAgIGNvbnN0IGlzU2luZ2xlRmllbGQgPSB0aGlzLmdldFZhbHVlVHlwZSgpID09PSB2YWx1ZVR5cGVzLlNJTkdMRTtcbiAgICBjb25zdCB2YWxpZGF0aW9ucyA9IHRoaXMudmFsaWRhdGlvbnM7XG5cbiAgICBjb25zdCBtZXRhZGF0YVJlbW92ZVBhdGggPSBpc1NpbmdsZUZpZWxkID8gdmFsdWUuZ2V0KGluZGV4KSA6IHZhbHVlLmdldChpbmRleCkudmFsdWVTZXEoKTtcbiAgICBjb25zdCBwYXJzZWRNZXRhZGF0YSA9XG4gICAgICBtZXRhZGF0YSAmJiAhbWV0YWRhdGEuaXNFbXB0eSgpXG4gICAgICAgID8geyBbY29sbGVjdGlvbk5hbWVdOiBtZXRhZGF0YS5yZW1vdmVJbihtZXRhZGF0YVJlbW92ZVBhdGgpIH1cbiAgICAgICAgOiBtZXRhZGF0YTtcblxuICAgIGl0ZW1zQ29sbGFwc2VkLnNwbGljZShpbmRleCwgMSk7XG4gICAga2V5cy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGl0ZW1zQ29sbGFwc2VkOiBbLi4uaXRlbXNDb2xsYXBzZWRdLCBrZXlzOiBbLi4ua2V5c10gfSk7XG5cbiAgICBvbkNoYW5nZSh2YWx1ZS5yZW1vdmUoaW5kZXgpLCBwYXJzZWRNZXRhZGF0YSk7XG4gICAgY2xlYXJGaWVsZEVycm9ycygpO1xuXG4gICAgLy8gUmVtb3ZlIGRlbGV0ZWQgaXRlbSBvYmplY3QgdmFsaWRhdGlvblxuICAgIGlmICh2YWxpZGF0aW9ucykge1xuICAgICAgdGhpcy52YWxpZGF0aW9ucyA9IHZhbGlkYXRpb25zLmZpbHRlcihpdGVtID0+IGl0ZW0ua2V5ICE9PSBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVJdGVtQ29sbGFwc2VUb2dnbGUgPSAoaW5kZXgsIGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGl0ZW1zQ29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG5ld0l0ZW1zQ29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWQubWFwKChjb2xsYXBzZWQsIGl0ZW1JbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSBpdGVtSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICFjb2xsYXBzZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sbGFwc2VkO1xuICAgIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXRlbXNDb2xsYXBzZWQ6IG5ld0l0ZW1zQ29sbGFwc2VkLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNvbGxhcHNlQWxsVG9nZ2xlID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgdmFsdWUsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQsIGxpc3RDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgbWluaW1pemVDb2xsYXBzZWRJdGVtcyA9IGZpZWxkLmdldCgnbWluaW1pemVfY29sbGFwc2VkJywgZmFsc2UpO1xuICAgIGNvbnN0IGxpc3RDb2xsYXBzZWRCeURlZmF1bHQgPSBmaWVsZC5nZXQoJ2NvbGxhcHNlZCcsIHRydWUpO1xuICAgIGNvbnN0IGFsbEl0ZW1zQ29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWQuZXZlcnkodmFsID0+IHZhbCA9PT0gdHJ1ZSk7XG5cbiAgICBpZiAobWluaW1pemVDb2xsYXBzZWRJdGVtcykge1xuICAgICAgbGV0IHVwZGF0ZWRJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkO1xuICAgICAgLy8gT25seSBhbGxvdyBjb2xsYXBzaW5nIGFsbCBpdGVtcyBpbiB0aGlzIG1vZGUgYnV0IG5vdCBvcGVuaW5nIGFsbCBhdCBvbmNlXG4gICAgICBpZiAoIWxpc3RDb2xsYXBzZWQgfHwgIWxpc3RDb2xsYXBzZWRCeURlZmF1bHQpIHtcbiAgICAgICAgdXBkYXRlZEl0ZW1zQ29sbGFwc2VkID0gQXJyYXkodmFsdWUuc2l6ZSkuZmlsbCghbGlzdENvbGxhcHNlZCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbGlzdENvbGxhcHNlZDogIWxpc3RDb2xsYXBzZWQsIGl0ZW1zQ29sbGFwc2VkOiB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpdGVtc0NvbGxhcHNlZDogQXJyYXkodmFsdWUuc2l6ZSkuZmlsbCghYWxsSXRlbXNDb2xsYXBzZWQpIH0pO1xuICAgIH1cbiAgfTtcblxuICBvYmplY3RMYWJlbChpdGVtKSB7XG4gICAgY29uc3QgeyBmaWVsZCwgZW50cnkgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5nZXRWYWx1ZVR5cGUoKTtcbiAgICBzd2l0Y2ggKHZhbHVlVHlwZSkge1xuICAgICAgY2FzZSB2YWx1ZVR5cGVzLk1JWEVEOiB7XG4gICAgICAgIGNvbnN0IGl0ZW1UeXBlID0gZ2V0VHlwZWRGaWVsZEZvclZhbHVlKGZpZWxkLCBpdGVtKTtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBpdGVtVHlwZS5nZXQoJ2xhYmVsJywgaXRlbVR5cGUuZ2V0KCduYW1lJykpO1xuICAgICAgICAvLyBlYWNoIHR5cGUgY2FuIGhhdmUgaXRzIG93biBzdW1tYXJ5LCBidXQgZGVmYXVsdCB0byB0aGUgbGlzdCBzdW1tYXJ5IGlmIGV4aXN0c1xuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gaXRlbVR5cGUuZ2V0KCdzdW1tYXJ5JywgZmllbGQuZ2V0KCdzdW1tYXJ5JykpO1xuICAgICAgICBjb25zdCBsYWJlbFJldHVybiA9IHN1bW1hcnkgPyBoYW5kbGVTdW1tYXJ5KHN1bW1hcnksIGVudHJ5LCBsYWJlbCwgaXRlbSkgOiBsYWJlbDtcbiAgICAgICAgcmV0dXJuIGxhYmVsUmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSB2YWx1ZVR5cGVzLlNJTkdMRToge1xuICAgICAgICBjb25zdCBzaW5nbGVGaWVsZCA9IGZpZWxkLmdldCgnZmllbGQnKTtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBzaW5nbGVGaWVsZC5nZXQoJ2xhYmVsJywgc2luZ2xlRmllbGQuZ2V0KCduYW1lJykpO1xuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gZmllbGQuZ2V0KCdzdW1tYXJ5Jyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBmcm9tSlMoeyBbc2luZ2xlRmllbGQuZ2V0KCduYW1lJyldOiBpdGVtIH0pO1xuICAgICAgICBjb25zdCBsYWJlbFJldHVybiA9IHN1bW1hcnkgPyBoYW5kbGVTdW1tYXJ5KHN1bW1hcnksIGVudHJ5LCBsYWJlbCwgZGF0YSkgOiBsYWJlbDtcbiAgICAgICAgcmV0dXJuIGxhYmVsUmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSB2YWx1ZVR5cGVzLk1VTFRJUExFOiB7XG4gICAgICAgIGNvbnN0IG11bHRpRmllbGRzID0gZmllbGQuZ2V0KCdmaWVsZHMnKTtcbiAgICAgICAgY29uc3QgbGFiZWxGaWVsZCA9IG11bHRpRmllbGRzICYmIG11bHRpRmllbGRzLmZpcnN0KCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS5nZXQobGFiZWxGaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBmaWVsZC5nZXQoJ3N1bW1hcnknKTtcbiAgICAgICAgY29uc3QgbGFiZWxSZXR1cm4gPSBzdW1tYXJ5ID8gaGFuZGxlU3VtbWFyeShzdW1tYXJ5LCBlbnRyeSwgdmFsdWUsIGl0ZW0pIDogdmFsdWU7XG4gICAgICAgIHJldHVybiAobGFiZWxSZXR1cm4gfHwgYE5vICR7bGFiZWxGaWVsZC5nZXQoJ25hbWUnKX1gKS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBvblNvcnRFbmQgPSAoeyBvbGRJbmRleCwgbmV3SW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIGNsZWFyRmllbGRFcnJvcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCwga2V5cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIC8vIFVwZGF0ZSB2YWx1ZVxuICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZS5nZXQob2xkSW5kZXgpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUuZGVsZXRlKG9sZEluZGV4KS5pbnNlcnQobmV3SW5kZXgsIGl0ZW0pO1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xuXG4gICAgLy8gVXBkYXRlIGNvbGxhcHNpbmdcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBpdGVtc0NvbGxhcHNlZFtvbGRJbmRleF07XG4gICAgaXRlbXNDb2xsYXBzZWQuc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICBjb25zdCB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgPSBbLi4uaXRlbXNDb2xsYXBzZWRdO1xuICAgIHVwZGF0ZWRJdGVtc0NvbGxhcHNlZC5zcGxpY2UobmV3SW5kZXgsIDAsIGNvbGxhcHNlZCk7XG5cbiAgICAvLyBSZXNldCBpdGVtIHRvIGVuc3VyZSB1cGRhdGVkIHN0YXRlXG4gICAgY29uc3QgdXBkYXRlZEtleXMgPSBrZXlzLm1hcCgoa2V5LCBrZXlJbmRleCkgPT4ge1xuICAgICAgaWYgKGtleUluZGV4ID09PSBvbGRJbmRleCB8fCBrZXlJbmRleCA9PT0gbmV3SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHV1aWQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGl0ZW1zQ29sbGFwc2VkOiB1cGRhdGVkSXRlbXNDb2xsYXBzZWQsIGtleXM6IHVwZGF0ZWRLZXlzIH0pO1xuXG4gICAgLy9jbGVhciBlcnJvciBmaWVsZHMgYW5kIHJlbW92ZSBvbGQgdmFsaWRhdGlvbnNcbiAgICBjbGVhckZpZWxkRXJyb3JzKCk7XG4gICAgdGhpcy52YWxpZGF0aW9ucyA9IHRoaXMudmFsaWRhdGlvbnMuZmlsdGVyKGl0ZW0gPT4gdXBkYXRlZEtleXMuaW5jbHVkZXMoaXRlbS5rZXkpKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4gIHJlbmRlckl0ZW0gPSAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVXcmFwcGVyLFxuICAgICAgZWRpdG9yQ29udHJvbCxcbiAgICAgIG9uVmFsaWRhdGVPYmplY3QsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBjb250cm9sUmVmLFxuICAgICAgcmVzb2x2ZVdpZGdldCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQsIGtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWRbaW5kZXhdO1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdO1xuICAgIGxldCBmaWVsZCA9IHRoaXMucHJvcHMuZmllbGQ7XG5cbiAgICBpZiAodGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5NSVhFRCkge1xuICAgICAgZmllbGQgPSBnZXRUeXBlZEZpZWxkRm9yVmFsdWUoZmllbGQsIGl0ZW0pO1xuICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJFcnJvbmVvdXNUeXBlZEl0ZW0oaW5kZXgsIGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8U29ydGFibGVMaXN0SXRlbVxuICAgICAgICBjc3M9e1tzdHlsZXMubGlzdENvbnRyb2xJdGVtLCBjb2xsYXBzZWQgJiYgc3R5bGVzLmxpc3RDb250cm9sSXRlbUNvbGxhcHNlZF19XG4gICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAga2V5PXtrZXl9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRMaXN0SXRlbVRvcEJhclxuICAgICAgICAgIGNvbGxhcHNlZD17Y29sbGFwc2VkfVxuICAgICAgICAgIG9uQ29sbGFwc2VUb2dnbGU9e3BhcnRpYWwodGhpcy5oYW5kbGVJdGVtQ29sbGFwc2VUb2dnbGUsIGluZGV4KX1cbiAgICAgICAgICBvblJlbW92ZT17cGFydGlhbCh0aGlzLmhhbmRsZVJlbW92ZSwgaW5kZXgsIGtleSl9XG4gICAgICAgICAgZHJhZ0hhbmRsZUhPQz17U29ydGFibGVIYW5kbGV9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e2BzdHlsZWQtbGlzdC1pdGVtLXRvcC1iYXItJHtrZXl9YH1cbiAgICAgICAgLz5cbiAgICAgICAgPE5lc3RlZE9iamVjdExhYmVsIGNvbGxhcHNlZD17Y29sbGFwc2VkfT57dGhpcy5vYmplY3RMYWJlbChpdGVtKX08L05lc3RlZE9iamVjdExhYmVsPlxuICAgICAgICA8Q2xhc3NOYW1lcz5cbiAgICAgICAgICB7KHsgY3NzLCBjeCB9KSA9PiAoXG4gICAgICAgICAgICA8T2JqZWN0Q29udHJvbFxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyPXtjeChjbGFzc05hbWVXcmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgW2Nzc2BcbiAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmNvbGxhcHNlZE9iamVjdENvbnRyb2x9O1xuICAgICAgICAgICAgICAgIGBdOiBjb2xsYXBzZWQsXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICB2YWx1ZT17aXRlbX1cbiAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgICBvbkNoYW5nZU9iamVjdD17dGhpcy5oYW5kbGVDaGFuZ2VGb3IoaW5kZXgpfVxuICAgICAgICAgICAgICBlZGl0b3JDb250cm9sPXtlZGl0b3JDb250cm9sfVxuICAgICAgICAgICAgICByZXNvbHZlV2lkZ2V0PXtyZXNvbHZlV2lkZ2V0fVxuICAgICAgICAgICAgICBtZXRhZGF0YT17bWV0YWRhdGF9XG4gICAgICAgICAgICAgIGZvckxpc3RcbiAgICAgICAgICAgICAgb25WYWxpZGF0ZU9iamVjdD17b25WYWxpZGF0ZU9iamVjdH1cbiAgICAgICAgICAgICAgY2xlYXJGaWVsZEVycm9ycz17Y2xlYXJGaWVsZEVycm9yc31cbiAgICAgICAgICAgICAgZmllbGRzRXJyb3JzPXtmaWVsZHNFcnJvcnN9XG4gICAgICAgICAgICAgIHJlZj17dGhpcy5wcm9jZXNzQ29udHJvbFJlZn1cbiAgICAgICAgICAgICAgY29udHJvbFJlZj17Y29udHJvbFJlZn1cbiAgICAgICAgICAgICAgdmFsaWRhdGlvbktleT17a2V5fVxuICAgICAgICAgICAgICBjb2xsYXBzZWQ9e2NvbGxhcHNlZH1cbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BvYmplY3QtY29udHJvbC0ke2tleX1gfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L0NsYXNzTmFtZXM+XG4gICAgICA8L1NvcnRhYmxlTGlzdEl0ZW0+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFcnJvbmVvdXNUeXBlZEl0ZW0oaW5kZXgsIGl0ZW0pIHtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMucHJvcHMuZmllbGQ7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZ2V0RXJyb3JNZXNzYWdlRm9yVHlwZWRGaWVsZEFuZFZhbHVlKGZpZWxkLCBpdGVtKTtcbiAgICBjb25zdCBrZXkgPSBgaXRlbS0ke2luZGV4fWA7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTb3J0YWJsZUxpc3RJdGVtXG4gICAgICAgIGNzcz17W3N0eWxlcy5saXN0Q29udHJvbEl0ZW0sIHN0eWxlcy5saXN0Q29udHJvbEl0ZW1Db2xsYXBzZWRdfVxuICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgIGtleT17a2V5fVxuICAgICAgPlxuICAgICAgICA8U3R5bGVkTGlzdEl0ZW1Ub3BCYXJcbiAgICAgICAgICBvbkNvbGxhcHNlVG9nZ2xlPXtudWxsfVxuICAgICAgICAgIG9uUmVtb3ZlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlUmVtb3ZlLCBpbmRleCwga2V5KX1cbiAgICAgICAgICBkcmFnSGFuZGxlSE9DPXtTb3J0YWJsZUhhbmRsZX1cbiAgICAgICAgLz5cbiAgICAgICAgPE5lc3RlZE9iamVjdExhYmVsIGNvbGxhcHNlZD17dHJ1ZX0gZXJyb3I9e3RydWV9PlxuICAgICAgICAgIHtlcnJvck1lc3NhZ2V9XG4gICAgICAgIDwvTmVzdGVkT2JqZWN0TGFiZWw+XG4gICAgICA8L1NvcnRhYmxlTGlzdEl0ZW0+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckxpc3RDb250cm9sKCkge1xuICAgIGNvbnN0IHsgdmFsdWUsIGZvcklELCBmaWVsZCwgY2xhc3NOYW1lV3JhcHBlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGl0ZW1zQ29sbGFwc2VkLCBsaXN0Q29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGl0ZW1zID0gdmFsdWUgfHwgTGlzdCgpO1xuICAgIGNvbnN0IGxhYmVsID0gZmllbGQuZ2V0KCdsYWJlbCcsIGZpZWxkLmdldCgnbmFtZScpKTtcbiAgICBjb25zdCBsYWJlbFNpbmd1bGFyID0gZmllbGQuZ2V0KCdsYWJlbF9zaW5ndWxhcicpIHx8IGZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgY29uc3QgbGlzdExhYmVsID0gaXRlbXMuc2l6ZSA9PT0gMSA/IGxhYmVsU2luZ3VsYXIudG9Mb3dlckNhc2UoKSA6IGxhYmVsLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgbWluaW1pemVDb2xsYXBzZWRJdGVtcyA9IGZpZWxkLmdldCgnbWluaW1pemVfY29sbGFwc2VkJywgZmFsc2UpO1xuICAgIGNvbnN0IGFsbEl0ZW1zQ29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWQuZXZlcnkodmFsID0+IHZhbCA9PT0gdHJ1ZSk7XG4gICAgY29uc3Qgc2VsZkNvbGxhcHNlZCA9IGFsbEl0ZW1zQ29sbGFwc2VkICYmIChsaXN0Q29sbGFwc2VkIHx8ICFtaW5pbWl6ZUNvbGxhcHNlZEl0ZW1zKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q2xhc3NOYW1lcz5cbiAgICAgICAgeyh7IGN4LCBjc3MgfSkgPT4gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGlkPXtmb3JJRH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdyYXBwZXIsXG4gICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy5vYmplY3RXaWRnZXRUb3BCYXJDb250YWluZXJ9XG4gICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICApfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxPYmplY3RXaWRnZXRUb3BCYXJcbiAgICAgICAgICAgICAgYWxsb3dBZGQ9e2ZpZWxkLmdldCgnYWxsb3dfYWRkJywgdHJ1ZSl9XG4gICAgICAgICAgICAgIG9uQWRkPXt0aGlzLmhhbmRsZUFkZH1cbiAgICAgICAgICAgICAgdHlwZXM9e2ZpZWxkLmdldChUWVBFU19LRVksIG51bGwpfVxuICAgICAgICAgICAgICBvbkFkZFR5cGU9e3R5cGUgPT4gdGhpcy5oYW5kbGVBZGRUeXBlKHR5cGUsIHJlc29sdmVGaWVsZEtleVR5cGUoZmllbGQpKX1cbiAgICAgICAgICAgICAgaGVhZGluZz17YCR7aXRlbXMuc2l6ZX0gJHtsaXN0TGFiZWx9YH1cbiAgICAgICAgICAgICAgbGFiZWw9e2xhYmVsU2luZ3VsYXIudG9Mb3dlckNhc2UoKX1cbiAgICAgICAgICAgICAgb25Db2xsYXBzZVRvZ2dsZT17dGhpcy5oYW5kbGVDb2xsYXBzZUFsbFRvZ2dsZX1cbiAgICAgICAgICAgICAgY29sbGFwc2VkPXtzZWxmQ29sbGFwc2VkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHsoIXNlbGZDb2xsYXBzZWQgfHwgIW1pbmltaXplQ29sbGFwc2VkSXRlbXMpICYmIChcbiAgICAgICAgICAgICAgPFNvcnRhYmxlTGlzdFxuICAgICAgICAgICAgICAgIGl0ZW1zPXtpdGVtc31cbiAgICAgICAgICAgICAgICByZW5kZXJJdGVtPXt0aGlzLnJlbmRlckl0ZW19XG4gICAgICAgICAgICAgICAgb25Tb3J0RW5kPXt0aGlzLm9uU29ydEVuZH1cbiAgICAgICAgICAgICAgICB1c2VEcmFnSGFuZGxlXG4gICAgICAgICAgICAgICAgbG9ja0F4aXM9XCJ5XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L0NsYXNzTmFtZXM+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcklucHV0KCkge1xuICAgIGNvbnN0IHsgZm9ySUQsIGNsYXNzTmFtZVdyYXBwZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICBvbkZvY3VzPXt0aGlzLmhhbmRsZUZvY3VzfVxuICAgICAgICBvbkJsdXI9e3RoaXMuaGFuZGxlQmx1cn1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVXcmFwcGVyfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmdldFZhbHVlVHlwZSgpICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJMaXN0Q29udHJvbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJJbnB1dCgpO1xuICAgIH1cbiAgfVxufVxuIl19 */")),
      index: index,
      key: key
    }, (0, _core.jsx)(StyledListItemTopBar, {
      onCollapseToggle: null,
      onRemove: (0, _partial2.default)(this.handleRemove, index, key),
      dragHandleHOC: _reactSortableHoc.SortableHandle
    }), (0, _core.jsx)(NestedObjectLabel, {
      collapsed: true,
      error: true
    }, errorMessage));
  }

  renderListControl() {
    const {
      value,
      forID,
      field,
      classNameWrapper
    } = this.props;
    const {
      itemsCollapsed,
      listCollapsed
    } = this.state;
    const items = value || (0, _immutable.List)();
    const label = field.get('label', field.get('name'));
    const labelSingular = field.get('label_singular') || field.get('label', field.get('name'));
    const listLabel = items.size === 1 ? labelSingular.toLowerCase() : label.toLowerCase();
    const minimizeCollapsedItems = field.get('minimize_collapsed', false);
    const allItemsCollapsed = itemsCollapsed.every(val => val === true);
    const selfCollapsed = allItemsCollapsed && (listCollapsed || !minimizeCollapsedItems);
    return (0, _core.jsx)(_core.ClassNames, null, ({
      cx,
      css
    }) => (0, _core.jsx)("div", {
      id: forID,
      className: cx(classNameWrapper, css(_templateObject2(), styleStrings.objectWidgetTopBarContainer))
    }, (0, _core.jsx)(_netlifyCmsUiDefault.ObjectWidgetTopBar, {
      allowAdd: field.get('allow_add', true),
      onAdd: this.handleAdd,
      types: field.get(_typedListHelpers.TYPES_KEY, null),
      onAddType: type => this.handleAddType(type, (0, _typedListHelpers.resolveFieldKeyType)(field)),
      heading: "".concat(items.size, " ").concat(listLabel),
      label: labelSingular.toLowerCase(),
      onCollapseToggle: this.handleCollapseAllToggle,
      collapsed: selfCollapsed
    }), (!selfCollapsed || !minimizeCollapsedItems) && (0, _core.jsx)(SortableList, {
      items: items,
      renderItem: this.renderItem,
      onSortEnd: this.onSortEnd,
      useDragHandle: true,
      lockAxis: "y"
    })));
  }

  renderInput() {
    const {
      forID,
      classNameWrapper
    } = this.props;
    const {
      value
    } = this.state;
    return (0, _core.jsx)("input", {
      type: "text",
      id: forID,
      value: value,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: classNameWrapper
    });
  }

  render() {
    if (this.getValueType() !== null) {
      return this.renderListControl();
    } else {
      return this.renderInput();
    }
  }

}

exports.default = ListControl;

_defineProperty(ListControl, "propTypes", {
  metadata: _reactImmutableProptypes.default.map,
  onChange: _propTypes.default.func.isRequired,
  onChangeObject: _propTypes.default.func.isRequired,
  onValidateObject: _propTypes.default.func.isRequired,
  validate: _propTypes.default.func.isRequired,
  value: _reactImmutableProptypes.default.list,
  field: _propTypes.default.object,
  forID: _propTypes.default.string,
  controlRef: _propTypes.default.func,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onOpenMediaLibrary: _propTypes.default.func.isRequired,
  onAddAsset: _propTypes.default.func.isRequired,
  onRemoveInsertedMedia: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  editorControl: _propTypes.default.func.isRequired,
  resolveWidget: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired
});

_defineProperty(ListControl, "defaultProps", {
  value: (0, _immutable.List)()
});